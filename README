# Caffeine

## CoffeeScript -> "Scheme" -> JavaScript

Compiles CoffeeScript to an intermediary Scheme-like language, which is then translated to JavaScript.

## Design decisions

* `do` - forms like `if` can only take 3 arguments - condition, then-body, else-body - but the bodies may consist of many statements. `do` groups several statements into one.

* `a = (x, y) -> x + y` translates to this:

	`(= a (fn (arglist x y) (+ x y)))`

	There are two things to note here. One is "arglist", which is just a list of arguments - I do it this way because just doing `(x y)` would break abstraction (seems like we're calling x with y). 
	The other is that we don't have named functions, just anonymous functions.

* Try catch is a little weird. It takes 4 arguments: try body, catch arglist, catch body, finally body. None of them are optional - you just pass in `(do)` for empty bodies.
